    public static void loadFontsFromJar(Object refObj, String relPath) {
        //first, we grab ahold of what all fonts are in the JRE's system
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String[] fontFamilies = ge.getAvailableFontFamilyNames();
        //Next we get a listing of all of the fonts in the refObj's jar at relPath
        ZipFile zipFile = new ZipFile("C:/test.zip");
        InputStream stream;
        Enumeration<? extends ZipEntry> entries = zipFile.entries();
        try {
            bi = ImageIO.read(refObj.getClass().getResourceAsStream(fileName));
        } catch (IOException e) {
            // File is probably referenced wrong or "mispleled"... lol.
            e.printStackTrace();
        }

        while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            stream = zipFile.getInputStream(entry);
            stream.close();
        }

        ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File("A.ttf")));

    }

    /**
     * Note from Charles: DO NOT USE - Retain it though :) this method correctly
     * does get the path... of Netbeans.. lol... ... Todo: adjust this to work
     * with concepts from the LoadImagefromJar... ... and we can make it work
     * for custom defined themes dynamically in conjunction with the
     * functionality available from Nilo's NimROD base. END NOTE...
     *
     * @param relativePath
     * @return
     * @throws NoSuchFileException
     */
    public static String relpath(String relativePath) {
        //TODO fix the following statement and we can start having dynamic LaF adjustment - Charles
        final File f = new File(DMUtils.class.getProtectionDomain().getCodeSource().getLocation().getPath());
        //END TODO - Charles
        String returnString;
        int i;
        returnString = f.getPath();
        i = returnString.indexOf("org-jme3-netbeans"); // This would have to be adjusted as well - Charles
        returnString = returnString.substring(0, i);
        returnString = returnString.replace(File.separatorChar, '/') + relativePath;
        File check = new File(returnString);

        return returnString;

    }
